generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  name                  String
  email                 String   @unique
  password              String
  businessName          String
  phone                 String?
  licenseNumber         String
  licenseState          String
  yearsExperience       String?
  selectedPlan          String   @default("pro")
  licenseFile           String?
  insuranceFile         String?
  hasActiveSubscription Boolean  @default(false)
  isLicenseVerified     Boolean  @default(false)
  role                  String   @default("artist")
  stripeId              String?  @unique
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  subscriptionStatus    String   @default("inactive")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  clients               Client[]

  @@map("users")
}

model Client {
  id        String     @id @default(cuid())
  userId    String
  name      String
  email     String?
  phone     String?
  notes     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  analyses  Analysis[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  intakes   Intake[]
  photos    Photo[]

  @@map("clients")
}

model Photo {
  id        String     @id @default(cuid())
  clientId  String
  url       String
  filename  String?
  lighting  String?
  quality   String?
  createdAt DateTime   @default(now())
  analyses  Analysis[]
  client    Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model Intake {
  id           String   @id @default(cuid())
  clientId     String
  conditions   String
  medications  String
  notes        String?
  result       String?
  rationale    String?
  flaggedItems String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  client       Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("intakes")
}

model Analysis {
  id             String   @id @default(cuid())
  clientId       String
  photoId        String?
  fitzpatrick    Int?
  undertone      String?
  confidence     Float?
  recommendation Json?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  photo          Photo?   @relation(fields: [photoId], references: [id])
  client         Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("analyses")
}

model Pigment {
  id         String   @id @default(cuid())
  brand      String
  name       String
  baseTone   String
  hueNotes   String
  opacity    String
  idealFitz  String
  tempShift  String?
  useCase    String
  hexPreview String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([brand, name])
  @@map("pigments")
}
