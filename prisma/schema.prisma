generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                @id @default(cuid())
  name                   String
  email                  String                @unique
  password               String
  businessName           String
  phone                  String?
  licenseNumber          String
  licenseState           String
  yearsExperience        String?
  selectedPlan           String                @default("pro")
  licenseFile            String?
  insuranceFile          String?
  hasActiveSubscription  Boolean               @default(false)
  isLicenseVerified      Boolean               @default(false)
  role                   String                @default("artist")
  stripeId               String?               @unique
  stripeCustomerId       String?
  stripeSubscriptionId   String?
  subscriptionStatus     String                @default("inactive")
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  address                String?
  avatar                 String?
  bio                    String?
  businessHours          String?
  cashAppUsername        String?
  certifications         String?
  experience             String?
  instagram              String?
  specialties            String?
  stripeConnectAccountId String?               @unique
  studioName             String?
  venmoUsername          String?
  website                String?
  // Studio payment settings for hybrid model
  employmentType         String? // "commissioned" or "booth_renter" - null for owners/students
  commissionRate         Float? // Percentage (0-100) - for commissioned staff
  boothRentAmount        Float? // Monthly rent amount - for booth renters
  // emailNotifications     Json?               @default("{\"subscription\": true, \"payments\": true, \"settings\": true}")
  appointments           Appointment[]
  calendarIntegrations   CalendarIntegration[]
  clients                Client[]
  complaints             Complaint[]
  consentForms           ConsentForm[]
  depositPayments        DepositPayment[]
  fileUploads            FileUpload[]
  formDrafts             FormDraft[]
  invoices               Invoice[]
  magicLinkTokens        MagicLinkToken[]
  metaConnections        MetaConnection[]
  orders                 Order[]
  portfolios             Portfolio[]
  procedures             Procedure[]
  products               Product[]
  services               Service[]
  supportTickets         SupportTicket[]
  notifications          Notification[]
  serviceAssignments     ServiceAssignment[]   @relation("UserServiceAssignments")
  assignedServices       ServiceAssignment[]   @relation("AssignedByUser")
  sentMessages           TeamMessage[]         @relation("SentMessages")
  receivedMessages       TeamMessage[]         @relation("ReceivedMessages")

  @@map("users")
}

model Client {
  id               String           @id @default(cuid())
  userId           String
  name             String
  email            String?
  phone            String?
  dateOfBirth      DateTime?
  emergencyContact String?
  medicalHistory   String?
  allergies        String?
  skinType         String?
  notes            String?
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  analyses         Analysis[]
  appointments     Appointment[]
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  consentForms     ConsentForm[]
  depositPayments  DepositPayment[]
  documents        Document[]
  fileUploads      FileUpload[]
  formDrafts       FormDraft[]
  intakes          Intake[]
  invoices         Invoice[]
  orders           Order[]
  photos           Photo[]
  procedures       Procedure[]

  @@map("clients")
}

model Photo {
  id        String     @id @default(cuid())
  clientId  String
  url       String
  filename  String?
  lighting  String?
  quality   String?
  createdAt DateTime   @default(now())
  analyses  Analysis[]
  client    Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model Intake {
  id           String   @id @default(cuid())
  clientId     String
  conditions   String
  medications  String
  notes        String?
  result       String?
  rationale    String?
  flaggedItems String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  client       Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("intakes")
}

model Analysis {
  id             String   @id @default(cuid())
  clientId       String
  photoId        String?
  fitzpatrick    Int?
  undertone      String?
  confidence     Float?
  recommendation Json?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  client         Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  photo          Photo?   @relation(fields: [photoId], references: [id])

  @@map("analyses")
}

model Pigment {
  id         String   @id @default(cuid())
  brand      String
  name       String
  baseTone   String
  hueNotes   String
  opacity    String
  idealFitz  String
  tempShift  String?
  useCase    String
  hexPreview String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([brand, name])
  @@map("pigments")
}

model MagicLinkToken {
  id        String   @id @default(cuid())
  userId    String
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("magic_link_tokens")
}

model Document {
  id        String       @id @default(cuid())
  clientId  String
  type      DocumentType
  fileUrl   String
  filename  String?
  fileSize  Int?
  mimeType  String?
  notes     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  client    Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Procedure {
  id                  String       @id @default(cuid())
  clientId            String
  procedureType       String
  voltage             Float?
  needleConfiguration String
  pigmentBrand        String
  pigmentColor        String
  lotNumber           String?
  depth               String?
  duration            Int?
  areaTreated         String?
  notes               String?
  procedureDate       DateTime     @default(now())
  followUpDate        DateTime?
  isCompleted         Boolean      @default(false)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  afterPhotos         String?
  appointmentId       String?
  beforePhotos        String?
  healingProgress     String?
  needleSize          String?
  serviceId           String?
  technique           String?
  touchUpDate         DateTime?
  touchUpScheduled    Boolean      @default(false)
  userId              String?
  appointment         Appointment? @relation(fields: [appointmentId], references: [id])
  client              Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service             Service?     @relation(fields: [serviceId], references: [id])
  user                User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([clientId])
  @@index([procedureType])
  @@index([procedureDate])
  @@map("procedures")
}

model MetaConnection {
  id                 String    @id @default(cuid())
  userId             String
  pageId             String
  pageName           String
  pageAccessToken    String
  pageTokenExpiresAt DateTime?
  igUserId           String?
  igUsername         String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, pageId])
  @@index([userId])
  @@map("meta_connections")
}

model CalendarIntegration {
  id            String           @id @default(cuid())
  userId        String
  provider      CalendarProvider
  providerName  String
  apiKey        String?
  webhookUrl    String?
  calendarId    String?
  calendarName  String?
  isActive      Boolean          @default(true)
  syncDirection SyncDirection    @default(BIDIRECTIONAL)
  lastSyncAt    DateTime?
  syncFrequency Int              @default(15)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider, calendarId])
  @@index([userId])
  @@map("calendar_integrations")
}

model DepositPayment {
  id                    String        @id @default(cuid())
  clientId              String
  appointmentId         String?
  userId                String
  amount                Decimal       @db.Decimal(10, 2)
  totalAmount           Decimal       @db.Decimal(10, 2)
  remainingAmount       Decimal       @db.Decimal(10, 2)
  currency              String        @default("USD")
  status                DepositStatus @default(PENDING)
  paymentMethod         String?       // "card", "klarna", "affirm", "afterpay", "in_person", "cash"
  collectInPerson       Boolean       @default(false) // True if payment will be collected in person
  allowFullPayment      Boolean       @default(false) // True if client can pay full amount upfront
  stripePaymentIntentId String?
  stripeSessionId       String?
  depositLink           String        @unique
  depositLinkExpiresAt  DateTime
  paidAt                DateTime?
  refundedAt            DateTime?
  refundAmount          Decimal?      @db.Decimal(10, 2)
  refundReason          String?
  notes                 String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  client                Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
  @@index([depositLink])
  @@index([status])
  @@map("deposit_payments")
}

model TeamMessage {
  id          String   @id @default(cuid())
  senderId    String   // User who sent the message
  recipientId String   // User who receives the message
  subject     String?
  message     String   // Message content
  isRead      Boolean  @default(false)
  readAt      DateTime?
  createdAt   DateTime @default(now())
  
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([recipientId])
  @@index([isRead])
  @@index([createdAt])
  @@map("team_messages")
}

model DataDeletionRequest {
  id          String         @id @default(cuid())
  email       String
  reason      String?
  status      DeletionStatus @default(PENDING)
  requestedAt DateTime       @default(now())
  completedAt DateTime?
  notes       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([email])
  @@index([status])
  @@map("data_deletion_requests")
}

model MarketingConnection {
  id            String   @id @default(cuid())
  userId        String
  platform      String
  accountId     String?
  accountName   String?
  accessToken   String
  refreshToken  String?
  tokenMetaJson String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, platform])
  @@index([userId])
  @@map("marketing_connections")
}

model MarketingLead {
  id        String   @id @default(cuid())
  email     String
  name      String?
  phone     String?
  company   String?
  plan      String
  notes     String?
  createdAt DateTime @default(now())
  source    String   @default("website")
  status    String   @default("new")

  @@index([email])
  @@index([status])
  @@index([source])
  @@map("marketing_leads")
}

model MarketingSync {
  id        String   @id @default(cuid())
  platform  String
  status    String
  lastSync  DateTime
  notes     String?
  createdAt DateTime @default(now())

  @@index([platform])
  @@index([status])
  @@map("marketing_syncs")
}

model CommissionTransaction {
  id                String   @id @default(cuid())
  ownerId           String   // Studio owner who owes the commission
  staffId           String   // Staff member who earned the commission
  appointmentId     String?  // Related appointment (if applicable)
  amount            Float    // Total service amount (excluding gratuity)
  gratuityAmount    Float    @default(0) // Gratuity/tip amount - goes 100% to staff for commissioned employees
  commissionRate    Float    // Commission percentage at time of transaction
  commissionAmount  Float    // Amount owed to staff member (from service, not including gratuity)
  ownerAmount       Float    // Amount owner keeps (from service only)
  staffTotalAmount  Float?   // Total amount staff receives (commission + 100% gratuity)
  employmentType    String   // "commissioned" or "booth_renter" at time of transaction
  status            String   @default("pending") // "pending", "paid", "cancelled"
  paidAt            DateTime?
  paidMethod        String?  // "cash", "check", "stripe", "venmo", etc.
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([ownerId])
  @@index([staffId])
  @@index([status])
  @@index([createdAt])
  @@map("commission_transactions")
}

model Appointment {
  id            String      @id @default(cuid())
  userId        String
  clientId      String
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  bookingUrl    String?
  deposit       Float?
  duration      Int
  endTime       DateTime
  paymentStatus String      @default("pending")
  price         Float?
  reminderSent  Boolean     @default(false)
  serviceType   String
  source        String      @default("booking")
  startTime     DateTime
  title         String
  status        String      @default("scheduled")
  client        Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  procedures    Procedure[]

  @@index([userId])
  @@index([clientId])
  @@index([startTime])
  @@index([status])
  @@map("appointments")
}

model Service {
  id              String              @id @default(cuid())
  userId          String
  name            String
  description     String?
  defaultDuration Int
  defaultPrice    Float
  category        String
  imageUrl        String?
  isActive        Boolean             @default(true)
  isCustomImage   Boolean             @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  procedures      Procedure[]
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignments     ServiceAssignment[]

  @@index([userId])
  @@index([category])
  @@index([isActive])
  @@map("services")
}

model ServiceAssignment {
  id             String   @id @default(cuid())
  serviceId      String
  userId         String
  assigned       Boolean  @default(true)
  assignedBy     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  service        Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user           User     @relation("UserServiceAssignments", fields: [userId], references: [id], onDelete: Cascade)
  assignedByUser User     @relation("AssignedByUser", fields: [assignedBy], references: [id], onDelete: Cascade)

  @@unique([serviceId, userId])
  @@index([userId])
  @@index([serviceId])
  @@index([assignedBy])
  @@map("service_assignments")
}

model ConsentForm {
  id                  String   @id @default(cuid())
  userId              String?
  clientId            String
  procedureType       String
  clientSignature     String
  clientSignatureDate DateTime @default(now())
  artistSignature     String
  artistSignatureDate DateTime @default(now())
  medicalHistory      String?
  allergies           String?
  medications         String?
  skinConditions      String?
  previousProcedures  String?
  consentGiven        Boolean  @default(true)
  photographyConsent  Boolean  @default(false)
  marketingConsent    Boolean  @default(false)
  emergencyContact    String?
  additionalNotes     String?
  formVersion         String   @default("1.0")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  client              Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user                User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([clientId])
  @@index([procedureType])
  @@index([createdAt])
  @@map("consent_forms")
}

model SupportTicket {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  assignedTo  String?
  category    String   @default("general")
  createdBy   String
  description String
  notes       String?
  resolution  String?
  title       String
  userId      String?
  status      String   @default("open")
  priority    String   @default("medium")
  user        User?    @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([priority])
  @@index([createdBy])
  @@index([assignedTo])
  @@map("support_tickets")
}

model Complaint {
  id          String   @id @default(cuid())
  subject     String
  description String
  status      String   @default("new")
  priority    String   @default("medium")
  category    String   @default("general")
  userId      String?
  reportedBy  String
  assignedTo  String?
  resolution  String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([priority])
  @@index([reportedBy])
  @@index([assignedTo])
  @@map("complaints")
}

model InventoryItem {
  id           String   @id @default(cuid())
  name         String
  category     String
  brand        String?
  sku          String?
  currentStock Int      @default(0)
  minStock     Int?
  maxStock     Int?
  unitCost     Float    @default(0)
  totalValue   Float    @default(0)
  status       String   @default("in_stock")
  description  String?
  location     String?
  supplier     String?
  lastUpdated  DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([category])
  @@index([status])
  @@index([brand])
  @@map("inventory_items")
}

model Meta {
  key   String @id
  value String

  @@map("meta")
}

model Product {
  id            String      @id @default(cuid())
  sku           String?
  name          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  category      String?
  description   String?
  images        String      @default("[]")
  isActive      Boolean     @default(true)
  isDigital     Boolean     @default(false)
  price         Float
  stockQuantity Int         @default(0)
  userId        String
  orderItems    OrderItem[]
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
  @@index([isActive])
  @@map("products")
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  clientId          String?
  clientEmail       String?
  clientName        String?
  clientPhone       String?
  totalAmount       Float
  fulfillmentMethod String      @default("pickup")
  shippingAddress   String?
  status            String      @default("pending")
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  orderItems        OrderItem[]
  client            Client?     @relation(fields: [clientId], references: [id])
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  type        String
  title       String
  description String?
  beforeImage String?
  afterImage  String?
  isPublic    Boolean  @default(true)
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isPublic])
  @@map("portfolios")
}

model FormDraft {
  id         String   @id @default(cuid())
  userId     String?
  clientId   String?
  formType   String
  formData   String
  isComplete Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  client     Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([clientId])
  @@index([formType])
  @@map("form_drafts")
}

model FileUpload {
  id          String   @id @default(cuid())
  userId      String?
  clientId    String?
  fileName    String
  fileUrl     String
  fileType    String
  fileSize    Int
  mimeType    String
  isTemporary Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  client      Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([clientId])
  @@index([fileType])
  @@index([isTemporary])
  @@map("file_uploads")
}

model Invoice {
  id              String        @id @default(cuid())
  userId          String
  clientId        String?
  invoiceNumber   String        @unique
  title           String
  providerName    String
  memo            String?
  subtotal        Float         @default(0)
  taxRate         Float         @default(0)
  taxAmount       Float         @default(0)
  total           Float         @default(0)
  status          String        @default("draft")
  dueDate         DateTime?
  paymentSchedule String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  items           InvoiceItem[]
  client          Client?       @relation(fields: [clientId], references: [id])
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([clientId])
  @@index([status])
  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  type        String
  name        String
  description String?
  quantity    Int      @default(1)
  unitPrice   Float
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@map("invoice_items")
}

enum DocumentType {
  ID_DOCUMENT
  CONSENT_FORM
  WAIVER
  INTAKE_FORM
  CONTRAINDICATION_FORM
  ANALYSIS_REPORT
  PHOTO
  OTHER
}

enum CalendarProvider {
  CALENDLY
  ACUITY_SCHEDULING
  GOOGLE_CALENDAR
  OUTLOOK_CALENDAR
  BOOKLY
  SIMPLYBOOK_ME
  CUSTOM
}

enum SyncDirection {
  IMPORT_ONLY
  EXPORT_ONLY
  BIDIRECTIONAL
}

enum DepositStatus {
  PENDING
  PAID
  EXPIRED
  REFUNDED
  CANCELLED
}

enum DeletionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum FulfillmentMethod {
  pickup
  delivery
  shipping
}

enum OrderStatus {
  pending
  confirmed
  processing
  shipped
  delivered
  cancelled
}

model Notification {
  id             String   @id @default(cuid())
  userId         String
  type           String
  title          String
  message        String
  isRead         Boolean  @default(false)
  priority       String   @default("medium") // low, medium, high
  actionRequired Boolean  @default(false)
  metadata       Json? // Additional data like formId, clientId, etc.
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
